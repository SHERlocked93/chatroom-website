{"version":3,"sources":["pages/login/index.module.css","components/settingBar/index.module.css","apis/fetch.ts","constants/server.ts","apis/index.ts","constants/browser.ts","store/index.ts","components/settingBar/index.tsx","components/chatroomList/index.tsx","components/groupInfo/index.tsx","components/chattingPanel/index.tsx","components/typewritingPanel/index.tsx","pages/home/index.tsx","pages/login/index.tsx","App.tsx","index.tsx"],"names":["module","exports","service","axios","create","baseURL","timeout","interceptors","request","use","config","error","console","Promise","reject","response","data","code","message","includes","Message","store","resetUserInfo","useHistory","push","Error","userLogin","username","password","fetch","method","url","USER_INFO","this","_getUserInfo","chatroomId","messageObj","log","userInfo","uid","Api","sessionStorage","setItem","JSON","stringify","value","getItem","parse","chatroomList","map","T","id","name","recentMessage","messageList","length","observable","personName","computed","action","SettingBar","className","style","settingBar","Component","ChatroomList","GroupInfo","ChattingPanel","TypewritingPanel","Home","inject","observer","props","chatroomNameList","chatroomObj","key","TabPane","Tabs","UsernameLocalKey","Login","history","Form","useForm","loginForm","registForm","useState","activeKey","setActiveKey","localStorage","usernameInit","setUsernameInit","onLoginFormReset","resetFields","onRegistFormReset","formLayout","labelCol","span","wrapperCol","tailLayout","offset","styles","container","defaultActiveKey","tab","onChange","form","initialValues","remember","onFinish","formData","window","then","Item","label","tooltip","rules","required","Password","valuePropName","type","htmlType","onClick","setFieldsValue","success","catch","err","getFieldValue","validator","rule","resolve","path","component","exact","moment","locale","ReactDOM","render","zhCN","App","document","getElementById"],"mappings":"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","file":"static/js/main.e94e8391.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"colors\":\"\\\"~styles/color.module.css\\\"\",\"sidebarBgc\":\"#4D474B\",\"sidebarColor\":\"#A5A4A5\",\"container\":\"login_container__24SaD\",\"tab\":\"login_tab__2mzrB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colors\":\"\\\"../../styles/color.module.css\\\"\",\"sidebarBgc\":\"#4D474B\",\"sidebarColor\":\"#A5A4A5\",\"settingBar\":\"settingBar_settingBar__3KVTe\"};","import axios, { AxiosResponse, AxiosRequestConfig, AxiosError } from 'axios'\nimport { CustomAxiosInstance } from 'typings/shims'\nimport { BaseURL } from 'constants/server'\nimport { message as Message } from 'antd'\nimport { useHistory } from 'react-router'\nimport store from 'store'\n\nconst service: CustomAxiosInstance = axios.create({\n    baseURL: BaseURL,\n    timeout: 5000\n})\n\n// request拦截器\nservice.interceptors.request.use(\n    (config: AxiosRequestConfig) => {\n        // config 处理\n        return config\n    },\n    (error: AxiosError) => {\n        console.error('Error in fetch.ts:  ', error)\n        return Promise.reject(error)\n    })\n\n// respone拦截器\nservice.interceptors.response.use(\n    (response: AxiosResponse) => {\n        const { code, data, message } = response.data as apiResponse\n        const config = response.config\n\n        if (![20000].includes(code)) {        // code为非20000或20001是抛错\n            Message.error('Error in fetch.js respone interceptors:  ' + message)\n            if (code === 40001) {             // token失效等需要重新登录的情况\n                store.resetUserInfo()\n                const history = useHistory()\n                history.push('/login')\n            }\n            return Promise.reject(new Error(message))\n        }\n        return response.data\n    },\n    (error: AxiosError) => {\n        error.message = '网络通讯异常，请检查！'\n        return Promise.reject(error)\n    }\n)\n\nexport default service\n","export const BaseURL = 'http://sherlocked93.club:7300/mock/5f997599a934e3002d35f0e2/chat-web'\n","import fetch from './fetch'\nimport { AxiosInterceptorManager, AxiosPromise, AxiosResponse } from 'axios'\n// import store from '../store'\n\nconst getChatroomMessage = ({ id = 1 } = {}) => fetch({\n    method: 'post',\n    url: '/chatroom/messages',\n    data: { id }\n})\n\nconst userLogin = ({ username, password }: loginQuery = {}) => fetch({\n    method: 'post',\n    url: '/login',\n    data: { username, password }\n})\n\nconst userRegist = ({ username, password }: loginQuery = {}) => fetch({\n    method: 'post',\n    url: '/regist',\n    data: { username, password }\n})\n\nexport {\n    getChatroomMessage,\n    userLogin,\n    userRegist\n}\n","export const USER_INFO = 'cw-user-info'\n","import { action, computed, observable } from 'mobx'\nimport * as Api from 'apis'\nimport { USER_INFO } from 'constants/browser'\n\nclass AppStore {\n    constructor() {\n        this._getUserInfo()\n    }\n\n    /**\n     * 用户信息\n     * @type {userInfo}\n     */\n    @observable\n    userInfo: userInfo = {\n        uid: null,\n        username: null\n    }\n\n    /**\n     * 聊天室信息\n     * @type {chatroomInfoItem[]}\n     */\n    @observable\n    chatroomList: chatroomInfoItem[] = [\n        {\n            id: 1,\n            name: '哈罗群',\n            messageList:\n                [\n                    { id: 123, personName: '小明', message: 'this is my message.' },\n                    { id: 124, personName: '小红', message: 'my exam is passed.' }\n                ]\n        }\n    ]\n\n    // 计算属性： 获取左侧群列表信息\n    @computed\n    get chatroomNameList(): chatroomNameItem[] {\n        return this.chatroomList.map(T => ({\n            id: T.id,\n            name: T.name,\n            recentMessage: T.messageList[T.messageList.length - 1]['message']\n        }))\n    }\n\n    @action\n    addMessage(chatroomId: number, messageObj: messageItem) {\n        console.log('addMessage')\n    }\n\n    // 清空用户信息\n    @action\n    resetUserInfo(): void {\n        this.userInfo = { uid: null, username: null }\n    }\n\n    // 用户登录\n    @action\n    async userLogin({ username, password }: loginQuery = {}) {\n        const { data: userInfo } = await Api.userLogin({ username, password })\n        sessionStorage.setItem(USER_INFO, JSON.stringify(userInfo))\n        return this.userInfo = userInfo\n    }\n\n    // 获取保存在sessionStorage中的用户信息，刷新页面的时候不需要重新登录\n    _getUserInfo() {\n        const value = sessionStorage.getItem(USER_INFO)\n        this.userInfo = value ? JSON.parse(value) : value\n    }\n}\n\nconst store: AppStore = new AppStore()\n\nexport default store\n","import React, { Component } from 'react'\nimport style from './index.module.css'\n\nexport default class SettingBar extends Component {\n    render() {\n        return (\n            <div className={ style.settingBar }>\n                setting bar\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nclass ChatroomList extends Component {\n  render() {\n    return (\n      <div>\n                chatlist\n      </div>\n    )\n  }\n}\n\nexport default ChatroomList\n","import React, { Component } from 'react'\n\nclass GroupInfo extends Component {\n  render() {\n    return (\n      <div>\n                group name\n      </div>\n    )\n  }\n}\n\nexport default GroupInfo\n","import React, { Component } from 'react'\n\nclass ChattingPanel extends Component {\n  render() {\n    return (\n      <div>\n                chatting panel\n      </div>\n    )\n  }\n}\n\nexport default ChattingPanel\n","import React, { Component } from 'react'\n\nclass TypewritingPanel extends Component {\n  render() {\n    return (\n      <div>\n                typewriting\n      </div>\n    )\n  }\n}\n\nexport default TypewritingPanel\n","import React, { Component } from 'react'\nimport { inject, observer } from 'mobx-react'\nimport SettingBar from '../../components/settingBar/index'\nimport ChatroomList from '../../components/chatroomList'\nimport GroupInfo from '../../components/groupInfo'\nimport ChattingPanel from '../../components/chattingPanel'\nimport TypewritingPanel from '../../components/typewritingPanel'\nimport { useHistory } from 'react-router'\n\nconst Home: React.FC = inject('store')(observer((props: any) => {\n    const { store } = props\n    if (!store.userInfo.uid) {\n        const history = useHistory()\n        history.push('/login')\n    }\n    return (\n        <div className='home'>\n            { store.chatroomNameList\n                .map((chatroomObj: chatroomNameItem) =>\n                    <div key={ chatroomObj.id }>{ chatroomObj.recentMessage }</div>)\n            }\n            <SettingBar/>\n            <ChatroomList/>\n            <GroupInfo/>\n            <ChattingPanel/>\n            <TypewritingPanel/>\n        </div>\n    )\n}))\n\nexport default Home\n","import React, { useState, useRef } from 'react'\nimport styles from './index.module.css'\nimport { inject, observer } from 'mobx-react'\nimport { Form, Input, Button, Tabs, Checkbox, message } from 'antd'\nimport * as Api from 'apis'\n\nconst { TabPane } = Tabs\n\nconst UsernameLocalKey = 'last_login_username'\n\ninterface loginFormData {\n    username: string\n    password: string\n    remember: boolean\n}\n\ninterface registFormData {\n    username: string\n    password: string\n    passwordConfirm: string\n}\n\nconst Login: React.FC = inject('store')(observer((props: any) => {\n    const { store, history } = props\n    const [loginForm] = Form.useForm()\n    const [registForm] = Form.useForm()\n    const [activeKey, setActiveKey] = useState('login')\n    const [usernameInit, setUsernameInit] = useState(localStorage.getItem(UsernameLocalKey) || '')   // username初始值\n\n    /* region Methods */\n    const onLoginFormReset = () => loginForm.resetFields()\n    const onRegistFormReset = () => registForm.resetFields()\n\n    const onLogin = (formData: loginFormData) => {\n        const { remember, username, password } = formData\n        remember &&\n        window.localStorage.setItem(UsernameLocalKey, username)\n        store.userLogin({ username, password })\n            .then(() => history.push('/'))\n    }\n\n    const onTabsChange = (activeKey: string) => {\n        setActiveKey(activeKey)\n        if (activeKey === 'login') {\n            onRegistFormReset()\n        } else {\n            onLoginFormReset()\n        }\n    }\n\n    const onRegist = (formData: registFormData) => {\n        const { username } = formData\n        Api.userRegist(formData)\n            .then(() => {\n                window.localStorage.setItem(UsernameLocalKey, username)\n                setUsernameInit(username)\n                setActiveKey('login')\n                onRegistFormReset()\n                loginForm.setFieldsValue({\n                    remember: true,\n                    username\n                })\n                message.success('注册成功，现在登录吧')\n            })\n            .catch(err => console.error('Error: 注册失败 ', err))\n    }\n    /* endregion  */\n\n    /* region 样式配置 */\n    const formLayout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 }\n    }\n    const tailLayout = {\n        wrapperCol: { offset: 8, span: 16 }\n    }\n    /* endregion 样式配置 */\n\n    return (\n        <div className={ styles.container }>\n            <Tabs defaultActiveKey='login'\n                  activeKey={ activeKey }\n                  className={ styles.tab }\n                  onChange={ onTabsChange }>\n                <TabPane tab='登录' key='login'>\n                    <Form name='login'\n                          form={ loginForm }\n                          { ...formLayout }\n                          initialValues={ { remember: true, username: usernameInit } }\n                          onFinish={ onLogin }>\n                        <Form.Item label='用户名：' name='username'\n                                   tooltip='选中「记住我」下次将自动填写用户名'\n                                   rules={ [{ required: true, message: '请输入用户名' }] }>\n                            <Input/>\n                        </Form.Item>\n\n                        <Form.Item label='密码：' name='password'\n                                   rules={ [{ required: true, message: '请输入密码' }] }>\n                            <Input.Password/>\n                        </Form.Item>\n\n                        <Form.Item name='remember' valuePropName='checked'\n                                   { ...tailLayout }>\n                            <Checkbox>记住我</Checkbox>\n                        </Form.Item>\n\n                        <Form.Item { ...tailLayout }>\n                            <Button type='primary' htmlType='submit'>提交</Button>\n                            <Button htmlType='button' onClick={ onLoginFormReset }>重置</Button>\n                        </Form.Item>\n                    </Form>\n                </TabPane>\n                <TabPane tab='注册' key='regist'>\n                    <Form name='regist'\n                          form={ registForm }\n                          { ...formLayout }\n                          onFinish={ onRegist }>\n                        <Form.Item label='用户名：' name='username'\n                                   rules={ [{ required: true, message: '请输入用户名' }] }>\n                            <Input/>\n                        </Form.Item>\n\n                        <Form.Item label='密码：' name='password'\n                                   rules={ [{ required: true, message: '请输入密码' }] }>\n                            <Input.Password/>\n                        </Form.Item>\n\n                        <Form.Item label='确认密码：' name='passwordConfirm'\n                                   rules={ [\n                                       { required: true, message: '请输入确认密码' },\n                                       ({ getFieldValue }) => ({\n                                           validator(rule, value) {\n                                               if (getFieldValue('password') === value) {\n                                                   return Promise.resolve()\n                                               }\n                                               return Promise.reject(new Error('The two passwords that you entered do not match!'))\n                                           }\n                                       })\n                                   ] }>\n                            <Input.Password/>\n                        </Form.Item>\n\n                        <Form.Item { ...tailLayout }>\n                            <Button type='primary' htmlType='submit'>提交</Button>\n                            <Button htmlType='button' onClick={ onRegistFormReset }>重置</Button>\n                        </Form.Item>\n                    </Form>\n                </TabPane>\n            </Tabs>\n        </div>\n    )\n}))\n\nexport default Login\n","import React from 'react'\nimport { Provider } from 'mobx-react'\nimport store from './store'\nimport Home from './pages/home'\nimport { HashRouter as Router, Route } from 'react-router-dom'\nimport Login from './pages/login'\n\nexport default () => {\n    return (\n        <div className='App'>\n            <Provider store={ store }>\n                <Router>\n                    <Route path='/' component={ Home } exact/>\n                    <Route path='/login' component={ Login }/>\n                </Router>\n            </Provider>\n        </div>\n    )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport moment from 'moment'\nimport { ConfigProvider } from 'antd'\n\nimport 'normalize.css/normalize.css'\nimport 'antd/dist/antd.css'\nimport './index.css'\nimport App from './App'\nimport zhCN from 'antd/lib/locale/zh_CN'\nimport 'moment/locale/zh-cn'\n\nmoment.locale('zh-cn')\n\nReactDOM.render(\n  <ConfigProvider locale={ zhCN }>\n    <App/>\n  </ConfigProvider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}