{"version":3,"sources":["pages/login/index.module.scss","components/settingBar/index.module.scss","components/groupInfo/index.module.scss","components/chattingPanel/index.module.scss","components/typewritingPanel/index.module.scss","constants/browser.ts","constants/server.ts","context/index.tsx","utils/index.ts","components/settingBar/index.tsx","apis/fetch.ts","components/chatroomList/index.tsx","apis/index.ts","components/groupInfo/index.tsx","components/chattingPanel/index.tsx","components/typewritingPanel/index.tsx","pages/home/index.tsx","pages/login/index.tsx","App.tsx","index.tsx","components/chatroomList/index.module.scss","pages/home/index.module.scss"],"names":["module","exports","USER_INFO","USER_SEND_MESSAGE_RES","BaseURL","initContextValue","chatroomInfoList","currentChatroom","userInfo","JSON","parse","sessionStorage","getItem","socket","io","transports","ACTIONS","reducer","state","action","type","removeItem","uid","username","newChatroom","find","T","id","payload","chatroomId","newMessage","chatroom","otherChatroomList","arr","item","idx","findIndex","e","Error","arrCopy","splice","Utils","newChatroomInfo","messageList","setItem","stringify","StateContext","React","createContext","DispatchContext","SettingBar","props","history","useHistory","dispatch","useContext","className","styles","container","onClick","push","createHashHistory","service","axios","create","baseURL","timeout","interceptors","request","use","config","error","console","Promise","reject","response","data","code","message","includes","Message","ChatroomItem","memo","name","recentMessage","recentMessageUsername","isActive","handleChangeChatroom","chatroomItem","header","content","ChatroomList","useState","chatroomNameList","setChatroomNameList","useCallback","useEffect","fetch","method","url","then","length","on","map","lastMessage","slice","chatroomObj","key","GroupInfo","ChattingPanel","chattingPanelDom","useRef","current","lastElementChild","scrollIntoView","ref","messageItem","messageId","TypewritingPanel","Form","useForm","form","resetFields","onFinish","emit","messageObj","Item","label","TextArea","placeholder","bordered","onKeyPress","submit","htmlType","Home","soundRef","play","home","src","room","TabPane","Tabs","UsernameLocalKey","Login","loginForm","registForm","activeKey","setActiveKey","localStorage","usernameInit","setUsernameInit","onLoginFormReset","onRegistFormReset","formLayout","labelCol","span","wrapperCol","tailLayout","offset","defaultActiveKey","tab","onChange","initialValues","remember","formData","password","window","Api","catch","err","tooltip","rules","required","Password","valuePropName","setFieldsValue","success","getFieldValue","validator","rule","value","resolve","useReducer","Provider","path","component","exact","moment","locale","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.9d0a99f4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"login_container__3f4Dd\",\"tab\":\"login_tab__6X2QU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"settingBar_container__3bH6-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"groupInfo_container__2fUdm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"chattingPanel_container__2h4qb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"typewritingPanel_container__2QNxo\"};","export const USER_INFO = 'cw-user-info'\n\n// socket事件\n\n// 用户发送信息\nexport const USER_SEND_MESSAGE = 'user-send-message'\n\n// 服务端接收到了用户发送的信息后返回给前端的\nexport const USER_SEND_MESSAGE_RES = 'user-send-message-res'\n","export const BaseURL = 'http://localhost:3090'\n","import React, { useEffect, useMemo, useReducer, useRef } from 'react';\nimport * as Api from 'apis';\nimport { USER_INFO, USER_SEND_MESSAGE, USER_SEND_MESSAGE_RES } from 'constants/browser';\nimport { io, Socket } from 'socket.io-client';\nimport { BaseURL } from 'constants/server';\nimport * as Utils from 'utils';\n\ndeclare interface IContextType {\n  socket: Socket;\n  userInfo: userInfo;\n  chatroomInfoList: IChatroomInfoItem[];\n  currentChatroom: IChatroomInfoItem | null;\n}\n\nexport const initContextValue: IContextType = {\n  chatroomInfoList: [],\n  currentChatroom: null,\n  userInfo: JSON.parse(sessionStorage.getItem(USER_INFO) ?? '{}'),\n  socket: io(BaseURL, {\n    transports: ['websocket', 'xhr-polling', 'jsonp-polling'],\n  }),\n};\n\n// Actions\nconst RESET_USER_INFO = 'RESET_USER_INFO';\nconst CHANGE_CHATROOM = 'CHANGE_CHATROOM';\nconst CHATROOM_INFO_LIST = 'CHATROOM_INFO_LIST';\nconst USER_LOGIN = 'USER_LOGIN';\nconst NEW_MESSAGE = 'NEW_MESSAGE';\n\nexport const ACTIONS = {\n  RESET_USER_INFO,\n  CHANGE_CHATROOM,\n  CHATROOM_INFO_LIST,\n  USER_LOGIN,\n  NEW_MESSAGE,\n};\n\nexport const reducer: React.Reducer<IContextType, IAction> = (\n  state: IContextType,\n  action: IAction\n): IContextType => {\n  // console.log('reducer: ', state, action)\n  switch (action.type) {\n    case ACTIONS.RESET_USER_INFO:\n      sessionStorage.removeItem(USER_INFO);\n      return { ...state, userInfo: { uid: null, username: null } };\n    case ACTIONS.CHANGE_CHATROOM:\n      const newChatroom =\n        state.chatroomInfoList.find((T) => T.id === action.payload.chatroomId) ?? null;\n      return { ...state, currentChatroom: newChatroom };\n    case ACTIONS.CHATROOM_INFO_LIST: {\n      return { ...state, ...action.payload };\n    }\n    case ACTIONS.NEW_MESSAGE: {\n      const { chatroomInfoList, currentChatroom } = state;\n      const { chatroomId, newMessage } = action.payload;\n      const chatroom = chatroomInfoList.find((chatroom) => chatroom.id === chatroomId);\n      if (!chatroom || !currentChatroom) return state;\n      const otherChatroomList = Utils.removeItemInArray<IChatroomInfoItem>(\n        chatroomInfoList,\n        chatroom\n      );\n      const newChatroomInfo = {\n        ...chatroom,\n        messageList: [...chatroom!.messageList, newMessage],\n      };\n      return currentChatroom.id === chatroomId\n        ? {\n            ...state,\n            chatroomInfoList: [newChatroomInfo, ...otherChatroomList],\n            currentChatroom: newChatroomInfo,\n          }\n        : { ...state, chatroomInfoList: [newChatroomInfo, ...otherChatroomList] };\n    }\n    case ACTIONS.USER_LOGIN: {\n      const { userInfo } = action.payload;\n      userInfo && sessionStorage.setItem(USER_INFO, JSON.stringify(userInfo));\n      return { ...state, userInfo };\n    }\n    default:\n      return state;\n  }\n};\n\nexport const StateContext = React.createContext<IContextType>(initContextValue);\nexport const DispatchContext = React.createContext<React.Dispatch<IAction>>(() => {});\n","/**\n * 删除数组中的元素，返回的是一个新数组\n * @param arr 目标数组\n * @param item 要删除的元素\n * @return {any[]}\n */\nexport const removeItemInArray = <T>(arr: T[], item: T): T[] | [] => {\n  const idx = arr.findIndex((e) => e === item);\n  if (idx < 0) {\n    throw new Error('这个数组里没有这个元素');\n  }\n  const arrCopy = [...arr];\n  arrCopy.splice(idx, 1);\n  return arrCopy;\n};\n\n/**\n * 创建 UUID\n * @returns {string}\n */\nexport const createUUID = (): string => {\n  let dt = new Date().getTime();\n  return 'xxxxxxxx-xxxx-x4xx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = (dt + Math.random() * 16) % 16 | 0;\n    dt = Math.floor(dt / 16);\n    return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import React, { useContext } from 'react';\nimport styles from './index.module.scss';\nimport { useHistory } from 'react-router';\nimport { DispatchContext, StateContext, ACTIONS } from 'context/index';\n\nconst SettingBar: React.FC = (props) => {\n  const history = useHistory();\n  const state = useContext(StateContext);\n  const dispatch = useContext(DispatchContext);\n\n  const handleLogout = () => {\n    dispatch({ type: ACTIONS.RESET_USER_INFO });\n    history.push('/login');\n  };\n\n  return (\n    <div className={styles.container}>\n      <div className=\"top-btns\">\n        <div className=\"top-btn\" onClick={handleLogout} />\n        <div className=\"top-btn\" />\n        <div className=\"top-btn\" />\n      </div>\n    </div>\n  );\n};\n\nexport default SettingBar;\n","import axios, { AxiosResponse, AxiosRequestConfig, AxiosError } from 'axios'\nimport { CustomAxiosInstance } from 'typings/shims'\nimport { BaseURL } from 'constants/server'\nimport { message as Message } from 'antd'\nimport { createHashHistory } from 'history'\n\nconst history = createHashHistory()\n\nconst service: CustomAxiosInstance = axios.create({\n  baseURL: BaseURL,\n  timeout: 5000,\n})\n\n// request拦截器\nservice.interceptors.request.use(\n  (config: AxiosRequestConfig) => {\n    // config 处理\n    return config\n  },\n  (error: AxiosError) => {\n    console.error('Error in fetch.ts:  ', error)\n    return Promise.reject(error)\n  }\n)\n\n// respone拦截器\nservice.interceptors.response.use(\n  (response: AxiosResponse) => {\n    const { code, data, message } = response.data as apiResponse\n    const config = response.config\n\n    if (![20000].includes(code)) {\n      // code为非20000或20001是抛错\n      Message.error('Error in fetch.js respone interceptors:  ' + message)\n      if (code === 40001) {\n        // token失效等需要重新登录的情况\n        history.push('/login')\n      }\n      return Promise.reject(new Error(message))\n    }\n    return data\n  },\n  (error: AxiosError) => {\n    error.message = '网络通讯异常，请检查！'\n    return Promise.reject(error)\n  }\n)\n\nexport default service.request\n","import React, { useEffect, useState, useContext, useCallback, useRef } from 'react';\nimport styles from './index.module.scss';\nimport { ACTIONS, DispatchContext, StateContext } from 'context/index';\nimport * as Api from 'apis';\nimport { USER_SEND_MESSAGE_RES } from 'constants/browser';\nimport * as Utils from 'utils';\n\ninterface newMessageObj {\n    chatroomId: number | null;\n    newMessage: IMessageItem | null;\n}\n\nconst ChatroomList: React.FC = () => {\n    const state = useContext(StateContext);\n    const dispatch = useContext(DispatchContext);\n    const [chatroomNameList, setChatroomNameList] = useState<IChatroomNameItem[]>([])\n\n    const handleChangeChatroom = useCallback((id: number) => {\n        dispatch({type: ACTIONS.CHANGE_CHATROOM, payload: {chatroomId: id}});\n    }, []);\n\n    useEffect(() => {\n        Api.chatroomInfoList().then((chatroomInfoList) => {\n            dispatch({\n                type: ACTIONS.CHATROOM_INFO_LIST,\n                payload: {\n                    chatroomInfoList,\n                    currentChatroom: chatroomInfoList.length ? chatroomInfoList[0] : null,\n                },\n            });\n        });\n    }, []);\n\n    useEffect(() => {\n        state.socket.on(USER_SEND_MESSAGE_RES, ({chatroomId, newMessage}: newMessageObj) => {\n            dispatch({type: ACTIONS.NEW_MESSAGE, payload: {chatroomId, newMessage}});\n        });\n    }, []);\n\n    // 左侧群列表信息\n    useEffect(() => {\n        setChatroomNameList(state.chatroomInfoList?.map((T) => {\n            const lastMessage = T.messageList.slice(-1)[0];\n            return {\n                id: T.id,\n                name: T.name,\n                recentMessage: lastMessage?.message,\n                recentMessageUsername: lastMessage?.username,\n            };\n        }));\n    }, [state.chatroomInfoList]);\n\n    return (\n        <div className={ styles.container }>\n            { chatroomNameList?.length\n                ? chatroomNameList.map((chatroomObj: IChatroomNameItem) => (\n                    <ChatroomItem\n                        { ...chatroomObj }\n                        key={ chatroomObj.id }\n                        handleChangeChatroom={ handleChangeChatroom }\n                        isActive={ state.currentChatroom?.id === chatroomObj.id }\n                    />\n                ))\n                : '正在请求房间列表' }\n        </div>\n    );\n};\n\nconst ChatroomItem: React.FC<IChatroomNameItem & {\n    isActive: boolean;\n    handleChangeChatroom: Function;\n}> = React.memo((props) => {\n    const {\n        name,\n        recentMessage,\n        id,\n        recentMessageUsername,\n        isActive,\n        handleChangeChatroom,\n    } = props;\n    const handleChangeChatroomItem = () => handleChangeChatroom(id);\n\n    return (\n        <div\n            className={ `${ styles.chatroomItem } ${ isActive ? styles['is-active'] : '' }` }\n            onClick={ handleChangeChatroomItem }\n        >\n            <div className={ styles.header }>{ name }</div>\n            <div className={ styles.content }>\n                { recentMessageUsername }： { recentMessage }\n            </div>\n        </div>\n    );\n});\n\nexport default ChatroomList;\n","import fetch from \"./fetch\";\nimport { AxiosInterceptorManager, AxiosPromise, AxiosResponse } from \"axios\";\n// import store from '../store'\n\n/**\n * 单个房间的信息\n * @param id\n * @returns {any}\n */\nconst chatroomInfo = ({ id = 1 } = {}) =>\n  fetch({\n    method: \"get\",\n    url: \"/chatroom/info\",\n    data: { id }\n  });\n\nconst chatroomInfoList = (): Promise<IChatroomInfoItem[]> =>\n  fetch({\n    method: \"get\",\n    url: \"/chatroom/info-list\"\n  });\n\nconst userLogin = ({\n  username,\n  password\n}: loginQuery = {}): Promise<userInfo> =>\n  fetch({\n    method: \"post\",\n    url: \"/login\",\n    data: { username, password }\n  });\n\nconst userRegist = ({ username, password }: loginQuery = {}): Promise<object> =>\n  fetch({\n    method: \"post\",\n    url: \"/regist\",\n    data: { username, password }\n  });\n\nexport { chatroomInfo, chatroomInfoList, userLogin, userRegist };\n","import React, { useContext } from 'react';\nimport styles from './index.module.scss';\nimport { ACTIONS, StateContext } from 'context/index';\n\nconst GroupInfo: React.FC = (props) => {\n  const state = useContext(StateContext);\n\n  return <div className={styles.container}>{state.currentChatroom?.name}</div>;\n};\n\nexport default GroupInfo;\n","import React, { useRef, useEffect, useContext } from 'react';\nimport styles from 'components/chattingPanel/index.module.scss';\nimport { USER_SEND_MESSAGE_RES } from 'constants/browser';\nimport { ACTIONS, StateContext, DispatchContext } from 'context/index';\n\nconst ChattingPanel: React.FC = () => {\n  const state = useContext(StateContext);\n  const dispatch = useContext(DispatchContext);\n  const chattingPanelDom = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    chattingPanelDom.current?.lastElementChild?.scrollIntoView();\n  });\n\n  return (\n    <div className={styles.container} ref={chattingPanelDom}>\n      {state.currentChatroom?.messageList.map((messageItem) => (\n        <Message {...messageItem} key={messageItem.messageId} />\n      ))}\n    </div>\n  );\n};\n\nconst Message: React.FC<IMessageItem> = (props) => {\n  const state = useContext(StateContext);\n  const dispatch = useContext(DispatchContext);\n  const { uid, username, message } = props;\n\n  return (\n    <div className={uid === state.userInfo.uid ? 'message-item is-me' : 'message-item'}>\n      <div className=\"message-item-username\">{username}</div>\n      <pre className=\"message-item-message\">{message}</pre>\n    </div>\n  );\n};\n\nexport default ChattingPanel;\n","import React, { useEffect, useMemo, useContext } from 'react';\nimport styles from './index.module.scss';\nimport { Form, Input, Button } from 'antd';\nimport { DispatchContext, StateContext, ACTIONS } from 'context/index';\nimport { USER_SEND_MESSAGE } from 'constants/browser';\n\nconst TypewritingPanel: React.FC = (props) => {\n  const state = useContext(StateContext);\n  const dispatch = useContext(DispatchContext);\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    form.resetFields();\n  }, [state.currentChatroom]);\n\n  const onFinish = ({ message }: { message: string }) => {\n    state.socket.emit(USER_SEND_MESSAGE, {\n      chatroomId: state.currentChatroom!.id,\n      messageObj: { ...state.userInfo, message },\n    });\n    form.resetFields();\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>): void => {\n    if (e.key === 'Enter') {\n      form.submit();\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      <Form form={form} name=\"add-message\" onFinish={onFinish}>\n        <Form.Item name=\"message\" label=\"\">\n          <Input.TextArea\n            placeholder=\"输入信息，按 Enter 提交\"\n            bordered={false}\n            onKeyPress={handleKeyPress}\n          />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            发送\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n\nexport default TypewritingPanel;\n","import React, { Component, useRef, useContext, useEffect } from 'react';\nimport SettingBar from 'components/settingBar/index';\nimport ChatroomList from 'components/chatroomList';\nimport GroupInfo from 'components/groupInfo';\nimport ChattingPanel from 'components/chattingPanel';\nimport TypewritingPanel from 'components/typewritingPanel';\nimport { useHistory } from 'react-router';\nimport styles from './index.module.scss';\nimport { USER_SEND_MESSAGE_RES } from 'constants/browser';\nimport { ACTIONS, StateContext } from 'context/index';\n\nconst Home: React.FC = (props) => {\n  const state = useContext(StateContext);\n  const soundRef = useRef<HTMLAudioElement>(null);\n  const history = useHistory();\n\n  if (!state.userInfo?.uid) {\n    history.push('/login');\n  }\n\n  useEffect(() => {\n    state.socket.on(USER_SEND_MESSAGE_RES, () => {\n      soundRef.current?.play();\n    });\n  }, []);\n\n  return (\n    <div className={styles.home}>\n      <audio id=\"my-message-sound\" ref={soundRef}>\n        <source\n          src=\"https://cdn.jsdelivr.net/gh/SHERlocked93/pic@master/new-message.mp3\"\n          type=\"audio/mpeg\"\n        />\n      </audio>\n      <div className={styles.container}>\n        <SettingBar />\n        <ChatroomList />\n        {state.currentChatroom ? (\n          <div className={styles.room}>\n            <GroupInfo />\n            <ChattingPanel />\n            <TypewritingPanel />\n          </div>\n        ) : (\n          <div />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useState, useRef, useContext, useEffect } from 'react';\nimport styles from './index.module.scss';\nimport { Form, Input, Button, Tabs, Checkbox, message } from 'antd';\nimport * as Api from 'apis';\nimport { RouteComponentProps } from 'react-router';\nimport { DispatchContext, StateContext, ACTIONS } from 'context/index';\n\nconst { TabPane } = Tabs;\n\nconst UsernameLocalKey = 'last_login_username';\n\ninterface loginFormData {\n  username: string;\n  password: string;\n  remember: boolean;\n}\n\ninterface registFormData {\n  username: string;\n  password: string;\n  passwordConfirm: string;\n}\n\nconst Login: React.FC<RouteComponentProps> = (props) => {\n  const { history } = props;\n  const state = useContext(StateContext);\n  const dispatch = useContext(DispatchContext);\n  const [loginForm] = Form.useForm();\n  const [registForm] = Form.useForm();\n  const [activeKey, setActiveKey] = useState('login');\n  const [usernameInit, setUsernameInit] = useState(localStorage.getItem(UsernameLocalKey) || ''); // username初始值\n\n  /* region Methods */\n  const onLoginFormReset = () => loginForm.resetFields();\n  const onRegistFormReset = () => registForm.resetFields();\n\n  useEffect(() => {\n    dispatch({ type: ACTIONS.RESET_USER_INFO });\n  }, []);\n\n  const onLogin = (formData: loginFormData) => {\n    const { remember, username, password } = formData;\n    remember && window.localStorage.setItem(UsernameLocalKey, username);\n    Api.userLogin({ username, password })\n      .then((userInfo) => {\n        dispatch({ type: ACTIONS.USER_LOGIN, payload: { userInfo } });\n        history.push('/');\n      })\n      .catch((err) => console.error('Error: 登录出错 ', err));\n  };\n\n  const onTabsChange = (activeKey: string) => {\n    setActiveKey(activeKey);\n    if (activeKey === 'login') {\n      onRegistFormReset();\n    } else {\n      onLoginFormReset();\n    }\n  };\n\n  const onRegist = (formData: registFormData) => {\n    const { username } = formData;\n    Api.userRegist(formData)\n      .then(() => {\n        window.localStorage.setItem(UsernameLocalKey, username);\n        setUsernameInit(username);\n        setActiveKey('login');\n        onRegistFormReset();\n        loginForm.setFieldsValue({\n          remember: true,\n          username,\n        });\n        message.success('注册成功，现在登录吧');\n      })\n      .catch((err) => console.error('Error: 注册失败 ', err));\n  };\n  /* endregion  */\n\n  /* region 样式配置 */\n  const formLayout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n  };\n  const tailLayout = {\n    wrapperCol: { offset: 8, span: 16 },\n  };\n  /* endregion 样式配置 */\n\n  return (\n    <div className={styles.container}>\n      <Tabs\n        defaultActiveKey=\"login\"\n        activeKey={activeKey}\n        className={styles.tab}\n        onChange={onTabsChange}\n      >\n        <TabPane tab=\"登录\" key=\"login\">\n          <Form\n            name=\"login\"\n            form={loginForm}\n            {...formLayout}\n            initialValues={{ remember: true, username: usernameInit }}\n            onFinish={onLogin}\n          >\n            <Form.Item\n              label=\"用户名：\"\n              name=\"username\"\n              tooltip=\"选中「记住我」下次将自动填写用户名\"\n              rules={[{ required: true, message: '请输入用户名' }]}\n            >\n              <Input />\n            </Form.Item>\n\n            <Form.Item\n              label=\"密码：\"\n              name=\"password\"\n              rules={[{ required: true, message: '请输入密码' }]}\n            >\n              <Input.Password />\n            </Form.Item>\n\n            <Form.Item name=\"remember\" valuePropName=\"checked\" {...tailLayout}>\n              <Checkbox>记住我</Checkbox>\n            </Form.Item>\n\n            <Form.Item {...tailLayout}>\n              <Button type=\"primary\" htmlType=\"submit\">\n                提交\n              </Button>\n              <Button htmlType=\"button\" onClick={onLoginFormReset}>\n                重置\n              </Button>\n            </Form.Item>\n          </Form>\n        </TabPane>\n        <TabPane tab=\"注册\" key=\"regist\">\n          <Form name=\"regist\" form={registForm} {...formLayout} onFinish={onRegist}>\n            <Form.Item\n              label=\"用户名：\"\n              name=\"username\"\n              rules={[{ required: true, message: '请输入用户名' }]}\n            >\n              <Input />\n            </Form.Item>\n\n            <Form.Item\n              label=\"密码：\"\n              name=\"password\"\n              rules={[{ required: true, message: '请输入密码' }]}\n            >\n              <Input.Password />\n            </Form.Item>\n\n            <Form.Item\n              label=\"确认密码：\"\n              name=\"passwordConfirm\"\n              rules={[\n                { required: true, message: '请输入确认密码' },\n                ({ getFieldValue }) => ({\n                  validator(rule, value) {\n                    if (getFieldValue('password') === value) {\n                      return Promise.resolve();\n                    }\n                    return Promise.reject(\n                      new Error('The two passwords that you entered do not match!')\n                    );\n                  },\n                }),\n              ]}\n            >\n              <Input.Password />\n            </Form.Item>\n\n            <Form.Item {...tailLayout}>\n              <Button type=\"primary\" htmlType=\"submit\">\n                提交\n              </Button>\n              <Button htmlType=\"button\" onClick={onRegistFormReset}>\n                重置\n              </Button>\n            </Form.Item>\n          </Form>\n        </TabPane>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default Login;\n","import React, { useReducer } from 'react';\nimport Home from './pages/home';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Login from './pages/login';\nimport { StateContext, DispatchContext, reducer, initContextValue } from './context/index';\n\nexport default () => {\n  const [state, dispatch] = useReducer(reducer, initContextValue);\n\n  return (\n    <div className=\"App\">\n      <StateContext.Provider value={state}>\n        <DispatchContext.Provider value={dispatch}>\n          <Router>\n            <Route path=\"/\" component={Home} exact />\n            <Route path=\"/login\" component={Login} />\n          </Router>\n        </DispatchContext.Provider>\n      </StateContext.Provider>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport moment from 'moment';\n\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport zhCN from 'antd/lib/locale/zh_CN';\nimport 'moment/locale/zh-cn';\n\nmoment.locale('zh-cn');\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"chatroomList_container__2W5ti\",\"chatroomItem\":\"chatroomList_chatroomItem__14Zl_\",\"is-active\":\"chatroomList_is-active__1wiqM\",\"header\":\"chatroomList_header__i8Qzy\",\"content\":\"chatroomList_content__nlkKM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"home_home__pD-Dm\",\"container\":\"home_container__1QSs2\",\"room\":\"home_room__1yo36\"};"],"sourceRoot":""}